from aiogram import Dispatcher, Bot, types, executor
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import requests
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import urllib.request
import os
from aiogram.dispatcher.filters import Text
import time
from aiogram.dispatcher import FSMContext
import motor.motor_asyncio
from datetime import datetime
from aiogram.utils.exceptions import BotBlocked
from keyboards import stop_kb, menu_kb, sponsor_ikb
from other_data import channel1, channel2, channelID1, channelID2, tiktok_url, tiktok_headers, youtube_url, youtube_headers, instagram_url, instagram_headers, add_user
from private_data import TOKEN, client


bot = Bot(TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


db = client['tg_bot']


class LinkHandler(StatesGroup):
    video_link = State()


@dp.message_handler(commands=['notify'])
async def notification(message: types.Message):
    if message.from_user.id == 1179022027:
        text = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ü§ñ\n\n–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤ —è –Ω–µ —Ä–∞–±–æ—Ç–∞–ª, —Ç–∞–∫ –∫–∞–∫ –≤–µ–ª–∏—Å—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.\n\n–°–µ–π—á–∞—Å —è –≤–Ω–æ–≤—å –∑–∞–ø—É—â–µ–Ω!\n\n–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã –±—É–¥–µ—Ç –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –≤ –º–æ–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ üëá\n\n@autosaverinfo\n\n–° –ª—é–±–æ–≤—å—é, –≤–∞—à @autosavervids_bot ‚ù§'
        users = await db.saverusers.find().to_list(None)
        for user in users:
            try:
                await bot.send_message(user['uid'], text, reply_markup=menu_kb)
            except Exception as err:
                pass


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    ikb = InlineKeyboardMarkup(row_width=1)
    ib1 = InlineKeyboardButton('–°–ø–æ–Ω—Å–æ—Ä 1Ô∏è‚É£', url=channel1)
    ib2 = InlineKeyboardButton('–°–ø–æ–Ω—Å–æ—Ä 2Ô∏è‚É£', url=channel2)
    ib3 = InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check')
    ikb.add(ib1, ib2, ib3)
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.full_name}! üëã\n\n–ß—Ç–æ–±—ã —è –Ω–∞—á–∞–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! üëá', reply_markup=ikb)
    user = await db.saverusers.find_one({"uid": message.from_user.id})
    if not user:
        await add_user(message.from_user.id, message.from_user.username)
    await message.delete()


@dp.message_handler(commands=['help'])
async def helper(message: types.Message):
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}, –Ω–∞ —Å–≤—è–∑–∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞!ü§ñ\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–∏–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–∏—Å–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –ø—Ä–æ—á–∏—Ç–∞–π –¥–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é üëá\nhttps://telegra.ph/Pravila-rabota-s-AutoSaver-12-06\n\n–ï—Å–ª–∏ –∂–µ –≤–æ–ø—Ä–æ—Å –Ω–µ —Ä–µ—à–∏–ª—Å—è –ø–∏—à–∏\n@tastygrape')
    await message.delete()


@dp.message_handler(content_types=['text'], state=LinkHandler.video_link)
async def tiktok(message: types.Message, state: FSMContext):
    check1 = await bot.get_chat_member(chat_id=channelID1, user_id=message.from_user.id)
    check2 = await bot.get_chat_member(chat_id=channelID2, user_id=message.from_user.id)
    if (check2['status'] != 'left'):
        async with state.proxy() as data:
            data['video_link'] = message.text
            try:
                if 'tiktok' in data['video_link']:
                    await bot.send_message(message.from_user.id, '–û–∂–∏–¥–∞–π—Ç–µ, –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è! ü§ñ')
                    querystring = {"link": (data['video_link'])}
                    response = requests.request("GET", tiktok_url, headers=tiktok_headers, params=querystring).json()
                    new_video = response['result']['aweme_detail']['video']['bit_rate'][0]['play_addr']['url_list'][0]
                    name = 'video.mp4'
                    urllib.request.urlretrieve(new_video, name)
                    await bot.send_video(message.from_user.id, open('video.mp4', 'rb'), caption='@autosavervids_bot')
                    await message.answer(f'–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ ‚úÖ\n\n–ñ–¥—É —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É...\n\n–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å üëá', reply_markup=stop_kb)
                    path = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'video.mp4')
                    os.remove(path)
                if 'youtube' in data['video_link']:
                    await bot.send_message(message.from_user.id, '–û–∂–∏–¥–∞–π—Ç–µ, –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è! ü§ñ')
                    querystring = {"videoId": data['video_link'][27:38]}
                    response = requests.request("GET", youtube_url, headers=youtube_headers, params=querystring).json()
                    new_video = response['videos']['items'][1]['url']
                    name = 'video.mp4'
                    urllib.request.urlretrieve(new_video, name)
                    await bot.send_video(message.from_user.id, open('video.mp4', 'rb'), caption='@autosavervids_bot')
                    await message.answer(f'–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ ‚úÖ\n\n–ñ–¥—É —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É...\n\n–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å üëá',
                                         reply_markup=stop_kb)
                    path = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'video.mp4')
                    os.remove(path)
                if 'instagram' in data['video_link']:
                    await bot.send_message(message.from_user.id, '–û–∂–∏–¥–∞–π—Ç–µ, –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è! ü§ñ')
                    querystring = {"url": data['video_link']}
                    response = requests.request("GET", instagram_url, headers=instagram_headers, params=querystring).json()
                    new_video = response['media']
                    name = 'video.mp4'
                    urllib.request.urlretrieve(new_video, name)
                    await bot.send_video(message.from_user.id, open('video.mp4', 'rb'), caption='@autosavervids_bot')
                    await message.answer(f'–í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ ‚úÖ\n\n–ñ–¥—É —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É...\n\n–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å üëá',
                                         reply_markup=stop_kb)
                    path = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'video.mp4')
                    os.remove(path)
            except Exception as err:
                print(f'[{datetime.now()}]: {err}')
                await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. ‚ùå\n\n–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É - /help', reply_markup=stop_kb)
    else:
        await message.answer('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤. üò∞\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!', reply_markup=sponsor_ikb)


@dp.callback_query_handler(lambda c: c.data == 'stop', state=LinkHandler.video_link)
async def lauch(call: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(call.id)
    await state.reset_state()
    await bot.send_message(call.from_user.id, '–Ø –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è! ü§ñ\n\n–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —è –Ω–µ —á–∏—Ç–∞—é —Ç–æ, —á—Ç–æ —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å.\n\n–¢–µ–∫—É—â–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ —Å –∫–æ—Ç–æ—Ä—ã—Ö —è –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ:\n- Tik Tok\n- Instagram Reels and Stories\n- YouTube Shorts\n\n–ï—Å–ª–∏ –Ω–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º—ã –≤ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ, –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É - /help', reply_markup=menu_kb)
    await call.message.delete()

@dp.callback_query_handler(lambda c: c.data == 'launch')
async def lauch(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await LinkHandler.video_link.set()
    await bot.send_message(call.from_user.id, '–Ø –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ! ü§ñ\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.')
    await call.message.delete()


@dp.callback_query_handler(lambda c: c.data == 'check')
async def checker(call: types.CallbackQuery):
    # await bot.answer_callback_query(call.id)
    user_channel_status = await bot.get_chat_member(chat_id=channelID1, user_id=call.from_user.id)
    user_channel_status2 = await bot.get_chat_member(chat_id=channelID2, user_id=call.from_user.id)
    if (user_channel_status2["status"] == 'member' and user_channel_status["status"] == 'member'):
        await bot.send_message(call.from_user.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–≤ –±–µ–∑ –≤–æ–¥–Ω–æ–π –º–∞—Ä–∫–∏! üéâ\n–°–ø–∏—Å–æ–∫ –ø–ª–æ—â–∞–¥–æ–∫ —Å –∫–æ—Ç–æ—Ä—ã—Ö —è –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ:\n- Tik Tok\n- Instagram Reels and Stories\n- YouTube Shorts\n\n–ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá', reply_markup=menu_kb)
        await call.message.delete()
    else:
        await bot.answer_callback_query(call.id, '–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!\n–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.', show_alert=True)


async def on_startup(_):
    print('online')


if __name__ == "__main__":
    executor.start_polling(dispatcher=dp,
                           skip_updates=True,
                           on_startup=on_startup)




